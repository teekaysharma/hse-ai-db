name: Validate All JSON Files
on: [push, pull_request]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          pip install jsonschema pyyaml requests
          echo "Dependencies installed"

      - name: Validate JSON Structure
        run: |
          echo "Validating all JSON files against schema..."
          python -c "
          import glob, json, jsonschema, sys
          
          # Enhanced schema definition
          schema = {
            'type': 'object',
            'required': ['regulations', 'hazard_library'],
            'properties': {
              'regulations': {
                'type': 'object',
                'patternProperties': {
                  '^[A-Za-z_]+$': {  # Region names
                    'type': 'object',
                    'patternProperties': {
                      '^[A-Za-z_]+$': {  # Country/Authority names
                        'type': 'object',
                        'required': ['source'],
                        'properties': {
                          'source': {'type': 'string', 'format': 'uri'},
                          'standards': {
                            'type': 'array',
                            'items': {
                              'required': ['id', 'title'],
                              'properties': {
                                'id': {'type': 'string'},
                                'url': {'type': 'string', 'format': 'uri'}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              'hazard_library': {
                'type': 'array',
                'items': {
                  'required': ['id', 'controls', 'severity', 'likelihood'],
                  'properties': {
                    'severity': {'type': 'number', 'minimum': 1, 'maximum': 5},
                    'likelihood': {'type': 'number', 'minimum': 1, 'maximum': 5}
                  }
                }
              }
            }
          }
          
          failed = False
          for json_file in glob.glob('docs/hse_knowledge.json', recursive=True):
              try:
                  with open(json_file) as f:
                      data = json.load(f)
                  jsonschema.validate(instance=data, schema=schema)
                  print(f'✅ {json_file} passed schema validation')
              except Exception as e:
                  print(f'❌ {json_file} failed validation:\n{str(e)}')
                  failed = True
          
          if failed:
              sys.exit(1)
          "

      - name: Validate Hazard Risk Scores
        run: |
          echo "Verifying hazard risk scores..."
          python -c "
          import json, sys
          with open('docs/hse_knowledge.json') as f:
              data = json.load(f)
          
          failed = False
          for hazard in data.get('hazard_library', []):
              if not (1 <= hazard['severity'] <= 5):
                  print(f'❌ Hazard {hazard["id"]}: severity {hazard["severity"]} out of range (1-5)')
                  failed = True
              if not (1 <= hazard['likelihood'] <= 5):
                  print(f'❌ Hazard {hazard["id"]}: likelihood {hazard["likelihood"]} out of range (1-5)')
                  failed = True
          
          if failed:
              sys.exit(1)
          print('✅ All hazard scores valid')
          "

      - name: Validate URLs
        run: |
          echo "Checking URL accessibility..."
          python -c "
          import requests, json, sys
          from urllib.parse import urlparse
          
          with open('docs/hse_knowledge.json') as f:
              data = json.load(f)
          
          failed = False
          def check_url(url):
              if not urlparse(url).scheme:
                  print(f'⚠️ URL missing scheme (http/https): {url}')
                  return False
              try:
                  r = requests.head(url, timeout=10, allow_redirects=True)
                  if r.status_code >= 400:
                      print(f'❌ URL returned HTTP {r.status_code}: {url}')
                      return False
                  return True
              except Exception as e:
                  print(f'❌ URL check failed: {url}\nError: {str(e)}')
                  return False
          
          # Check regulation sources
          for region in data['regulations'].values():
              for country in region.values():
                  if not check_url(country['source']):
                      failed = True
                  for standard in country.get('standards', []):
                      if 'url' in standard and not check_url(standard['url']):
                          failed = True
          
          # Check hazard references
          for hazard in data['hazard_library']:
              for ref in hazard.get('references', []):
                  if ref.startswith(('http://', 'https://')) and not check_url(ref):
                      failed = True
          
          if failed:
              sys.exit(1)
          print('✅ All URLs accessible')
          "
